Discussion
----------

1. Which would be the most efficient data structure for a data set with the
   following requirements:

  - frequently removing and adding items to the beginning of the data structure

  - frequently removing and adding items to the end of the data structure

  - rarely indexing and searching

  A. A Python list B. Singly linked list C. Doubly linked list

  Explain your answer.


  C. Doubly linked list, because you can traverse to both previous node and next

  node.




2. Which would be the most efficient data structure for a data set with the
   following requirements:

  - order is unimportant

  -frequently adding and removing items

  - frequently looking up items

  A. A Python list  B. A Dictionary  C. Deque  D. Binary Search Tree

  Explain your answer.

  
  B. Dictionary, because dictionary are key-value pairs and quick at looking up values

  by keys.




3. Explain why looking up, adding elements, and removing elements from a 
   dictionary or hash map are all O(1) operations.

  
  A hash is a stable, one-way conversion of data to a fixed-size result. 

  Hashmap use hash and the length of the array to find index, so looking up, 

  adding and removing becomes quick.




4. Explain why removing elements from or adding elements to an arbitrary
   location in a Python list are O(n) operations.


   Because each element has to shift their position after removing and adding.




5. What is the correct runtime for:

  - Bubble Sort? O(n^2)

  - Quicksort? O(nlogn)

  - Merge Sort? O(nlogn)

  - Insertion Sort? O(n^2)


6. What is the difference between a tree and a graph?


A tree is a graph while a graph may not be a tree because a graph can have loops.


7. Using the Python implementation of Quicksort from the instructions:

  Given the list [8, 4, 1, 6, 5, 2, 7, 3]:
  When this function is initially called, what are the values of:

    - lst - [8, 4, 1, 6, 5, 2, 7, 3]

    - pivot - 5

    - lo - [4, 1, 2, 3]

    - hi - [8, 6, 7]



  When the quicksort is first called recursively on the `lo` list, what are the
  values of:

  - lst - [4, 1, 2, 3]

  - pivot - 2

  - lo - [1]

  - hi - [4, 3]
